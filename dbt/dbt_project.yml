# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'collaboration_recommender'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'production'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: [ "models" ]
analysis-paths: [ "analyses" ]
test-paths: [ "tests" ]
seed-paths: [ "seeds" ]
macro-paths: [ "macros" ]
snapshot-paths: [ "snapshots" ]

clean-targets: # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  collaboration_recommender:
    # Config indicated by + and applies to all files under models/example/
    # The 'historic' tag is used to identify models that will not be updated on a regular basis - these are typically used to store historical data.
    historic:
      +materialized: table
      +tags:
        - "historic"
    # The 'base' tag is used to identify models that are intended to be used as the foundation for other models.
    staging:
      +materialized: table
      +tags:
        - "base"

    # The `final` tag is used to identify models that represent the final output of a dbt project - before this is run, we need to generate text embeddings in the ANALYTICS schema.
    intermediate:
      +materialized: table
      +tags:
        - "final"
    dimensions:
      +materialized: table
      +tags:
        - "final"
    facts:
      +materialized: table
      +tags:
        - "final"
